name: Build Mobile Action
description: Build unsigned builds of Thunderbird/K-9 Mobile for Android

inputs:
  packageFormat:
    description: Package formats to build
    required: true
    default: "apk"
  packageFlavor:
    description: Package flavor
    required: true
    default: "foss"
  appName:
    description: app-name
    required: true
    default: "app-thunderbird"
  releaseType:
    description: release type
    required: true
    default: debug
  revSha:
    description: sha revision
    required: true
outputs:
  appName:
    description: app-name
    value: ${{ inputs.appName }}
  releaseType:
    description: release type
    value: ${{ inputs.releaseType }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.revSha }}

    - name: Copy CI gradle.properties
      shell: bash
      run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Build It
      shell: bash
      env:
        PACKAGE_FORMAT: ${{ inputs.packageFormat }}
        PACKAGE_FLAVOR: ${{ inputs.packageFlavor }}
        APP_NAME: ${{ inputs.appName }}
        RELEASE_TYPE: ${{ inputs.releaseType }}
      run: |
          BUILD_CMD="${PACKAGE_FORMAT}"
          if [[ "$PACKAGE_FORMAT" = "apk" ]]; then
            BUILD_CMD="assemble"
          fi
          # ^ upper-case first characater of bash string
          BUILD_COMMAND="${BUILD_CMD}${PACKAGE_FLAVOR^}${RELEASE_TYPE^}"
          echo "BUILDING: :${APP_NAME}:${BUILD_COMMAND}"
          ./gradlew clean :${APP_NAME}:${BUILD_COMMAND} --no-build-cache --no-configuration-cache
          echo "Status: $?"

    - name: Move apps to upload directory
      shell: bash
      env:
        PACKAGE_FORMAT: ${{ inputs.packageFormat }}
        PACKAGE_FLAVOR: ${{ inputs.packageFlavor }}
        APP_NAME: ${{ inputs.appName }}
        RELEASE_TYPE: ${{ inputs.releaseType }}
        OUT_BASE: ${{ inputs.APP_NAME }}/build/outputs/${{ inputs.packageFormat }}
        UPLOAD_PATH: "uploads"
      run: |
        mkdir -p "${UPLOAD_PATH}"
        if [[ "${PACKAGE_FORMAT}" = "apk" ]]; then
          OUT_PATH="${OUT_BASE}/${PACKAGE_FORMAT}/${PACKAGE_FLAVOR}/${RELEASE_TYPE}"
          OUT_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}-unsigned.apk"
          RENAMED_FILE="${OUT_FILE/-unsigned/}"
        fi
        if [[ "${PACKAGE_FORMAT}" = "bundle" ]]; then
          OUT_PATH="${OUT_BASE}/${PACKAGE_FLAVOR}${RELEASE_TYPE^}"
          OUT_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.aab"
          RENAMED_FILE="${OUT_FILE}"
        else
          echo "PACKAGE_FORMAT $PACKAGE_FORMAT is unknown. Exiting."
          exit 23
        fi
        if [[ -f "${OUT_PATH}/${OUT_FILE}" ]]; then
          mv -f "${OUT_PATH}/${OUT_FILE}" "${UPLOAD_PATH}/${RENAMED_FILE}"
        else
          echo "Build file ${OUT_PATH}/${OUT_FILE} not found. Exiting."
          ls -l ${OUT_PATH}
          exit 24
        fi
        echo "Upload contents:"
        ls -l ${UPLOAD_PATH}/

    - name: Upload unsigned
      uses: actions/upload-artifact@v4
      with:
        name: unsigned-${{ inputs.packageFormat }}-${{ inputs.packageFlavor }}
        path: uploads/
        if-no-files-found: error
